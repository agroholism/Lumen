// TODO
Fix imports!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Lumen 0.6
- 05.05.2019
* improvements of curring
* new functions:
	Collections.* values x
	Collections.- values values'
	Collections.+ values values'
	Collection.iter values action
	Collection.iteri values action
	Collections.getIndex values indices
* bug fix

- 06.05.2019
* mut modifier in constructor params
* partial constructors
* TypePattern

- 07.05.2019
* Context pattern removed and now included in type pattersn
* Format type class
* improved string interpolation

- 09.05.2019
* lazy evaluation
* promises
* yield prototype

- 16.07.2019
* Ref type ! operator, <- is also operator now
* import improvements

- 17.07.2019
* extend operator
* fix function declaration
* fix applicatte
* fix dot apllicate
* fix parser
* chained equality
* fix Ord class
* = operator for Arrays, Maps and Lists, now they can be used in Map

Lumen 0.8
- 01.04.2020
* function can not have tail recursion and yield at the same time
* [||] and if patterns
* return in generators now allowed
* from in array/list literals
* assert function

- 11.06.2020
* nan and inf constants
* Number.isnan function
* exception types
* raise operator

02.11.2020
+ readWith
+ class Applicative
+ Text patterns
+ Range patterns
+ Text functions
+ Cloneable

03.11.2020 (0.8.7612.10426)
+ Classes now can implement other classes.
+ Fix pipe operator parsing.
+ nl const
+ while let
+ fun keyword
+ fun + implicit match

04.11.2020 (0.8.7613.4268)
+ try+except+finally
+ try+except+finally+yield
+ type X = exception
+ Error, AssertError
+ fix [(Some x)] to [Some x]
+ changed match syntax from = sign to ->
+ not Type pattern

+ Unknown escape sequences in text literal are errors now
+ Hexadecimal, decimal and octal unicode char codes in text literals
+ Raw text literals

05.11.2020
+ Named for and while cycles
+ Operators retry, redo
+ Operators break when, raise when, return when, retry when, redo when
+ Operator raise now creates instance of Error when argument is Text
+ Operator raise from
+ Exception messages updated, now they can include notes and help links
+ Experimental: @intern annotation
+ Keyword 'finally' renamed to 'ensure'
+ Keyword 'if' in pattern matching now replaced with 'when'
+ Allowed when in for cycle
+ Tanimoto switched to Levenshtein

+ bug #1 fix "\((1 + 1) + 2)"

06.11.2020
+ (start..end, 2), start.., ..end, ..
+ Array -> MutableArray, Map -> MutableMap

07.11.2020
+ Functions with contexts

08.11.2020
+ bug #2 fix Condition.Closure was wrong
+ bug #3 fix ConditionMatch.Closure was wrong

24.11.2020
+ typeof
+ method call syntax

24.12.2020
+ Future

25.12.2020
+ Stream -> Seq
+ MutableArray -> MutArray
+ MutableMap -> MutMap
+ Array literal @[]
+ Seq literal #[]
+ seqOf, mutArrayOf, mutMapOf, listOf

+ Future.wait, Future.waitFor, Future.pure, Future.delayed, Future.waitResult
+ class Monad
+ Monad implementation for Future
+ Applicative.<*> -> Applicative.-<<
+ Applicative.>>-

26.12.2020
+ class Monoid
+ class Alternative
+ Monad implementation for Function
+ Monoid implementation for Function, Number
+ Alternative implementation for Collection

03.01.2021
+ 1h refactoring stage 1
+ Number.parse, Number.tryParse
+ type pattern as constructor pattern
+ not pattern
- if match

08.o4.2022
+ atom, async modules

09.04.2022
+ private keyword for top-level

10.04.2022
+ import algorithm

TODO:
- fix import
- let Left v | Right v = i  YES (make pattern parsing rules)
- module - it is required?
<-> Mut

Lumen 0.9
NON STRICT FOREACH
3. let callSecond () = callFirst()
   and callFirst () = callSecond()
10. operator in pattern matching?

let reduce.<T: Default> [] _ =
    T.default ()

type Logger = aspect
	before Number.* =
		println "Called"

type Point = Point Number Number
	invariant shouldBePositive (Point x y) =
		x > 0 and y > 0

	let getX (Point x _) = !x
	let getY (Point _ y) = !y
	
	mut let setX val (Point x _) =
		x <- val

	mut let setY val (Point _ y) =
		y <- val

assertWarns(warn, fun, *args, **kwds) Ч fun(*args, **kwds) порождает предупреждение

assertWarnsRegex(warn, r, fun, *args, **kwds) Ч fun(*args, **kwds) порождает предупреждение и сообщение соответствует регул€рному выражению r

assertGreater(a, b) Ч a > b

assertGreaterEqual(a, b) Ч a >= b

assertLess(a, b) Ч a < b

assertLessEqual(a, b) Ч a <= b

assertRegex(s, r) Ч r.search(s)

assertNotRegex(s, r) Ч not r.search(s)

assertCountEqual(a, b)  Ч a и b содержат те же элементы в одинаковых количествах, но пор€док не важен

			if (ActiveBottomControl == control) {
				return;
			}

			if (this.direction) {
				control.Location = new Point(0, -this.bottomPanel.Height);
			}
			else {
				control.Location = new Point(0, this.bottomPanel.Height);
			}

			Int32 index = this.bottomPanel.Height / 10;

			Timer t = new Timer { Interval = 1, Enabled = true };

			t.Tick += (sender, e) => {
				// down
				if (direction && control.Location.Y < 0) {
					// move down
					control.Location = new Point(0, control.Location.Y + index > 0 ? 0 : control.Location.Y + index);
					ActiveBottomControl.Location = new Point(0, ActiveBottomControl.Location.Y + index);
				}
				else if (!direction && control.Location.Y > 0) {
					control.Location = new Point(0, control.Location.Y - index < 0 ? 0 : control.Location.Y - index);
					ActiveBottomControl.Location = new Point(0, ActiveBottomControl.Location.Y - index);
				}
				else {
					t.Enabled = false;
					ActiveBottomControl = control;
					direction = !direction;
				}
			};

	