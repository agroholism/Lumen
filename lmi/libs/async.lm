private let rec makeContinuation (future: Future) (automat: Flow.Automat) = 
	future
	|> Future.catch (Flow.Automat.throw _ automat)
	>>= fun yielded ->
		match Flow.Automat.moveWith yielded automat:
        | Flow.Automat.State.Inter value -> makeContinuation value automat
        | Flow.Automat.State.Final value -> value |> Future.wrap

private let initialContinuationMaker = 
	Future.wrap () |> makeContinuation

private let wrapToAutomat (x: Flow) = x |> Flow.Automat
private let wrapToAutomat _ = Flow.empty () |> Flow.Automat

let async = _ >> (wrapToAutomat >> initialContinuationMaker)

let runAsync = async >> run