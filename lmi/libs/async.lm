private let rec makeContinuation (future: Future) (automat: Seq.Automat) = 
	future
	|> Future.catch (Seq.Automat.throw _ automat)
	>>= fun yielded ->
		match Seq.Automat.moveWith yielded automat:
        | Seq.Automat.State.Inter value -> makeContinuation value automat
        | Seq.Automat.State.Final value -> value |> Future.wrap

private let initialContinuationMaker = 
	Seq.wrap () |> makeContinuation

private let wrapToAutomat (x: Seq) = x |> Seq.Automat
private let wrapToAutomat _ = Seq.empty () |> Seq.Automat

let async = _ >> (wrapToAutomat >> initialContinuationMaker)

let runAsync = async >> run